// ==UserScript==
// @name         wplace.live helper utils
// @description  A set of Quality of Life tools for wplace.live website
// @version      0.4.0
// @match        https://wplace.live/*
// @run-at       document-start
// @grant        none
// @updateURL    https://raw.githubusercontent.com/sukui24/Wplace-ColorDetector/main/assets/WplaceHelperUtils.user.js
// @downloadURL  https://raw.githubusercontent.com/sukui24/Wplace-ColorDetector/main/assets/WplaceHelperUtils.user.js
// ==/UserScript==

(()=>{const e=e=>Math.round((e-81)/.6),t=e=>Math.round(.6*e+81),n=e=>e<0?0:e>255?255:0|e,r=([e,r,o])=>[n(t(e)),n(t(r)),n(t(o))],o=[{id:0,premium:!1,name:"Transparent",rgb:[0,0,0]},{id:1,premium:!1,name:"Black",rgb:[0,0,0]},{id:2,premium:!1,name:"Dark Gray",rgb:[60,60,60]},{id:3,premium:!1,name:"Gray",rgb:[120,120,120]},{id:4,premium:!1,name:"Light Gray",rgb:[210,210,210]},{id:5,premium:!1,name:"White",rgb:[255,255,255]},{id:6,premium:!1,name:"Deep Red",rgb:[96,0,24]},{id:7,premium:!1,name:"Red",rgb:[237,28,36]},{id:8,premium:!1,name:"Orange",rgb:[255,127,39]},{id:9,premium:!1,name:"Gold",rgb:[246,170,9]},{id:10,premium:!1,name:"Yellow",rgb:[249,221,59]},{id:11,premium:!1,name:"Light Yellow",rgb:[255,250,188]},{id:12,premium:!1,name:"Dark Green",rgb:[14,185,104]},{id:13,premium:!1,name:"Green",rgb:[19,230,123]},{id:14,premium:!1,name:"Light Green",rgb:[135,255,94]},{id:15,premium:!1,name:"Dark Teal",rgb:[12,129,110]},{id:16,premium:!1,name:"Teal",rgb:[16,174,166]},{id:17,premium:!1,name:"Light Teal",rgb:[19,225,190]},{id:18,premium:!1,name:"Dark Blue",rgb:[40,80,158]},{id:19,premium:!1,name:"Blue",rgb:[64,147,228]},{id:20,premium:!1,name:"Cyan",rgb:[96,247,242]},{id:21,premium:!1,name:"Indigo",rgb:[107,80,246]},{id:22,premium:!1,name:"Light Indigo",rgb:[153,177,251]},{id:23,premium:!1,name:"Dark Purple",rgb:[120,12,153]},{id:24,premium:!1,name:"Purple",rgb:[170,56,185]},{id:25,premium:!1,name:"Light Purple",rgb:[224,159,249]},{id:26,premium:!1,name:"Dark Pink",rgb:[203,0,122]},{id:27,premium:!1,name:"Pink",rgb:[236,31,128]},{id:28,premium:!1,name:"Light Pink",rgb:[243,141,169]},{id:29,premium:!1,name:"Dark Brown",rgb:[104,70,52]},{id:30,premium:!1,name:"Brown",rgb:[149,104,42]},{id:31,premium:!1,name:"Beige",rgb:[248,178,119]},{id:32,premium:!0,name:"Medium Gray",rgb:[170,170,170]},{id:33,premium:!0,name:"Dark Red",rgb:[165,14,30]},{id:34,premium:!0,name:"Light Red",rgb:[250,128,114]},{id:35,premium:!0,name:"Dark Orange",rgb:[228,92,26]},{id:36,premium:!0,name:"Light Tan",rgb:[214,181,148]},{id:37,premium:!0,name:"Dark Goldenrod",rgb:[156,132,49]},{id:38,premium:!0,name:"Goldenrod",rgb:[197,173,49]},{id:39,premium:!0,name:"Light Goldenrod",rgb:[232,212,95]},{id:40,premium:!0,name:"Dark Olive",rgb:[74,107,58]},{id:41,premium:!0,name:"Olive",rgb:[90,148,74]},{id:42,premium:!0,name:"Light Olive",rgb:[132,197,115]},{id:43,premium:!0,name:"Dark Cyan",rgb:[15,121,159]},{id:44,premium:!0,name:"Light Cyan",rgb:[187,250,242]},{id:45,premium:!0,name:"Light Blue",rgb:[125,199,255]},{id:46,premium:!0,name:"Dark Indigo",rgb:[77,49,184]},{id:47,premium:!0,name:"Dark Slate Blue",rgb:[74,66,132]},{id:48,premium:!0,name:"Slate Blue",rgb:[122,113,196]},{id:49,premium:!0,name:"Light Slate Blue",rgb:[181,174,241]},{id:50,premium:!0,name:"Light Brown",rgb:[219,164,99]},{id:51,premium:!0,name:"Dark Beige",rgb:[209,128,81]},{id:52,premium:!0,name:"Light Beige",rgb:[255,197,165]},{id:53,premium:!0,name:"Dark Peach",rgb:[155,82,73]},{id:54,premium:!0,name:"Peach",rgb:[209,128,120]},{id:55,premium:!0,name:"Light Peach",rgb:[250,182,164]},{id:56,premium:!0,name:"Dark Tan",rgb:[123,99,82]},{id:57,premium:!0,name:"Tan",rgb:[156,132,107]},{id:58,premium:!0,name:"Dark Slate",rgb:[51,57,65]},{id:59,premium:!0,name:"Slate",rgb:[109,117,141]},{id:60,premium:!0,name:"Light Slate",rgb:[179,185,209]},{id:61,premium:!0,name:"Dark Stone",rgb:[109,100,63]},{id:62,premium:!0,name:"Stone",rgb:[148,140,107]},{id:63,premium:!0,name:"Light Stone",rgb:[205,197,158]}].filter((e=>"Transparent"!==e.name)).map((e=>({...e,tinted:r(e.rgb)}))),i=(e,t)=>Math.max(Math.abs(e[0]-t[0]),Math.abs(e[1]-t[1]),Math.abs(e[2]-t[2]));(()=>{const e=document.createElement("script");e.textContent=`(${()=>{const e=HTMLCanvasElement.prototype.getContext;HTMLCanvasElement.prototype.getContext=function(t,n){if("webgl"===t||"webgl2"===t||"experimental-webgl"===t){const r=Object.assign({preserveDrawingBuffer:!0},n||{}),o=e.call(this,t,r);return o&&!this.__wplaceHooked&&(this.__wplaceHooked=!0,this.setAttribute("data-wplace-gl","1")),o}return e.call(this,t,n)},window.__wplace_getContext_patched__=!0}})();`,document.documentElement.appendChild(e),e.remove()})();(async()=>{const t=await new Promise((e=>{const t=document.querySelector(".maplibregl-canvas");if(t)return e(t);const n=new MutationObserver((()=>{const t=document.querySelector(".maplibregl-canvas");t&&(n.disconnect(),e(t))}));n.observe(document.documentElement,{childList:!0,subtree:!0})})),r=t.getContext("webgl2")||t.getContext("webgl")||t.getContext("experimental-webgl");if(!r)return void console.warn("[wplace] No WebGL context available; cannot sample.");const a=document.createElement("div"),l=localStorage.getItem("colorDetectorPosition");let d=l?JSON.parse(l):{right:20,top:"60%"};const s=window.innerWidth-d.right-250;Object.assign(a.style,{position:"fixed",left:s+"px",top:"string"==typeof d.top?d.top:d.top+"px",transform:"string"==typeof d.top?"translateY(-50%)":"none",zIndex:999999,font:"16px/1.4 monospace",padding:"12px 16px",background:"rgba(0,0,0,0.75)",color:"#fff",borderRadius:"12px",pointerEvents:"auto",whiteSpace:"nowrap",display:"flex",flexDirection:"column",gap:"4px",cursor:"move",userSelect:"none",minWidth:"250px",width:"fit-content",maxWidth:"400px",boxSizing:"border-box"});let p=!1,m={x:0,y:0};a.addEventListener("mousedown",(e=>{p=!0;const t=a.getBoundingClientRect();m.x=e.clientX-t.left,m.y=e.clientY-t.top,a.style.cursor="grabbing",a.style.opacity="0.8"})),document.addEventListener("mousemove",(e=>{(e=>{if(!p)return;e.preventDefault();const t=e.clientX-m.x,n=e.clientY-m.y,r=window.innerWidth,o=window.innerHeight,i=a.offsetWidth,l=a.offsetHeight,d=Math.max(10,Math.min(t,r-i-10)),s=Math.max(10,Math.min(n,o-l-10));a.style.left=d+"px",a.style.top=s+"px",a.style.right="auto",a.style.transform="none"})(e),h(e)})),document.addEventListener("mouseup",(()=>{(()=>{if(!p)return;p=!1,a.style.cursor="move",a.style.opacity="1";const e=a.getBoundingClientRect(),t=window.innerWidth,n=(window.innerHeight,{right:t-e.right,top:e.top});localStorage.setItem("colorDetectorPosition",JSON.stringify(n))})(),f()})),window.addEventListener("resize",(()=>{if(!p){const e=localStorage.getItem("colorDetectorPosition");if(e){const t=JSON.parse(e),n=window.innerWidth-t.right-250;a.style.left=n+"px",a.style.top=t.top+"px",a.style.right="auto",a.style.transform="none"}}if(!b){const e=localStorage.getItem("areaCalculatorPosition");if(e){const t=JSON.parse(e);g.style.right=t.right+"px",g.style.bottom=t.bottom+"px",g.style.left="auto",g.style.top="auto"}}})),document.body.appendChild(a);const g=document.createElement("div"),c=localStorage.getItem("areaCalculatorPosition");let u=c?JSON.parse(c):{right:20,bottom:20};Object.assign(g.style,{position:"fixed",right:u.right+"px",bottom:u.bottom+"px",zIndex:999998,font:"14px/1.4 monospace",padding:"16px",background:"rgba(0,0,0,0.75)",color:"#fff",borderRadius:"12px",pointerEvents:"auto",width:"300px",maxWidth:"300px",border:"1px solid rgba(255,255,255,.2)",cursor:"move",userSelect:"none",boxSizing:"border-box"});let b=!1,x={x:0,y:0};const h=e=>{if(!b)return;e.preventDefault();const t=e.clientX-x.x,n=e.clientY-x.y,r=window.innerWidth,o=window.innerHeight,i=g.offsetWidth,a=g.offsetHeight,l=Math.max(10,Math.min(t,r-i-10)),d=Math.max(10,Math.min(n,o-a-10));g.style.left=l+"px",g.style.top=d+"px",g.style.right="auto",g.style.bottom="auto"},f=()=>{if(!b)return;b=!1,g.style.cursor="move",g.style.opacity="1";const e=g.getBoundingClientRect(),t=window.innerWidth,n=window.innerHeight,r={right:t-e.right,bottom:n-e.bottom};localStorage.setItem("areaCalculatorPosition",JSON.stringify(r))};g.addEventListener("mousedown",(e=>{const t=document.getElementById("drag-handle");if(!t||!t.contains(e.target)&&"BUTTON"===e.target.tagName)return;b=!0;const n=g.getBoundingClientRect();x.x=e.clientX-n.left,x.y=e.clientY-n.top,g.style.cursor="grabbing",g.style.opacity="0.8"}));let y=null,v=null,w={x:0,y:0,tlX:0,tlY:0,pxX:0,pxY:0},S=!0,k="false"!==localStorage.getItem("showAreaCalculator"),L=!1;const B=()=>{const e=document.querySelector("#bm-h");if(e){const t=e.textContent.match(/\(Tl X: (\d+), Tl Y: (\d+), Px X: (\d+), Px Y: (\d+)\)/);if(t)return{tlX:parseInt(t[1]),tlY:parseInt(t[2]),pxX:parseInt(t[3]),pxY:parseInt(t[4]),finalX:1e3*parseInt(t[1])+parseInt(t[3]),finalY:1e3*parseInt(t[2])+parseInt(t[4])}}return null},$=()=>{let e=0,t=0,n=0;if(y&&v){const r=1e3*y.tlX+y.pxX,o=1e3*y.tlY+y.pxY,i=1e3*v.tlX+v.pxX,a=1e3*v.tlY+v.pxY;t=Math.abs(i-r)+1,n=Math.abs(a-o)+1,e=t*n}const r=`\n        <div style="margin-bottom: 8px;">\n          <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px; flex-wrap: wrap;">\n            <span style="width: 80px; flex-shrink: 0;">Corner 1:</span>\n            <span style="color: ${y?"#4ade80":"#94a3b8"}; word-wrap: break-word; flex: 1; min-width: 0;">\n              ${y?`${(1e3*y.tlX+y.pxX).toLocaleString()}, ${(1e3*y.tlY+y.pxY).toLocaleString()}`:"Not set"}\n            </span>\n            <button id="geo-tl" style="\n              background: #3b82f6;\n              color: white;\n              border: none;\n              padding: 4px 8px;\n              border-radius: 4px;\n              font-size: 12px;\n              cursor: pointer;\n              font-family: monospace;\n              pointer-events: auto;\n              flex-shrink: 0;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n            ">Set</button>\n          </div>\n        </div>\n\n        <div style="margin-bottom: 12px;">\n          <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px; flex-wrap: wrap;">\n            <span style="width: 80px; flex-shrink: 0;">Corner 2:</span>\n            <span style="color: ${v?"#4ade80":"#94a3b8"}; word-wrap: break-word; flex: 1; min-width: 0;">\n              ${v?`${(1e3*v.tlX+v.pxX).toLocaleString()}, ${(1e3*v.tlY+v.pxY).toLocaleString()}`:"Not set"}\n            </span>\n            <button id="geo-br" style="\n              background: #3b82f6;\n              color: white;\n              border: none;\n              padding: 4px 8px;\n              border-radius: 4px;\n              font-size: 12px;\n              cursor: pointer;\n              font-family: monospace;\n              pointer-events: auto;\n              flex-shrink: 0;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n            ">Set</button>\n          </div>\n        </div>\n\n        <div style="padding: 8px; background: rgba(255,255,255,.1); border-radius: 6px; word-wrap: break-word;">\n          <div style="font-weight: bold; color: ${e>0?"#fbbf24":"#94a3b8"};">\n            Area: ${e>0?e.toLocaleString():"0"} pixels\n          </div>\n          ${e>0?`\n            <div style="font-size: 12px; color: #94a3b8; margin-top: 4px;">\n              Width: ${t.toLocaleString()} × Height: ${n.toLocaleString()}\n            </div>\n          `:""}\n        </div>\n\n        <div style="margin-top: 12px;">\n          <button id="clear-area" style="\n            background: #ef4444;\n            color: white;\n            border: none;\n            padding: 6px 12px;\n            border-radius: 6px;\n            font-size: 12px;\n            cursor: pointer;\n            font-family: monospace;\n            pointer-events: auto;\n          ">Clear</button>\n        </div>\n      `;g.innerHTML=`\n        <div id="drag-handle" style="\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-bottom: ${S?"12px":"0"};\n          cursor: move;\n          padding: 4px 0;\n          border-bottom: ${S?"1px solid rgba(255,255,255,.1)":"none"};\n          margin-bottom: ${S?"8px":"0"};\n        ">\n          <div style="font-weight: bold; color: #4ade80;">\n            Area Calculator\n          </div>\n          <button id="expand-toggle" style="\n            background: none;\n            color: white;\n            border: 1px solid rgba(255,255,255,.3);\n            padding: 4px 8px;\n            border-radius: 4px;\n            font-size: 12px;\n            cursor: pointer;\n            font-family: monospace;\n          ">${S?"−":"+"}</button>\n        </div>\n        ${S?r:""}\n      `;const o=document.getElementById("geo-tl"),i=document.getElementById("geo-br"),a=document.getElementById("clear-area"),l=document.getElementById("expand-toggle");l&&l.addEventListener("click",(()=>{S=!S,$()})),o&&o.addEventListener("click",(()=>{const e=B();e&&(y={tlX:e.tlX,tlY:e.tlY,pxX:e.pxX,pxY:e.pxY},$())})),i&&i.addEventListener("click",(()=>{const e=B();e&&(v={tlX:e.tlX,tlY:e.tlY,pxX:e.pxX,pxY:e.pxY},$())})),a&&a.addEventListener("click",(()=>{y=null,v=null,$()}))};$(),k&&document.body.appendChild(g);let C,D=!1,E=0;let Y=!1,I=null,M=null,P="",X="",T=!1,G=-1,z=-1;const A=()=>{const e=document.getElementById("settings-toggle");e&&e.addEventListener("click",(e=>{e.stopPropagation(),L=!L;(()=>{const e=P||"RGB: 0,0,0",t=`\n              <div style="padding: 8px; background: rgba(255,255,255,.05); border-radius: 6px; margin-top: 8px;">\n                <div style="font-weight: bold; margin-bottom: 8px; color: #60a5fa;">Settings</div>\n                <label style="display: flex; align-items: center; gap: 8px; cursor: pointer; font-size: 14px;">\n                  <input type="checkbox" id="area-calc-toggle" ${k?"checked":""} style="margin: 0;">\n                  <span>Show Area Calculator</span>\n                </label>\n              </div>\n            `;a.innerHTML=`<div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px; padding-bottom: 4px; border-bottom: 1px solid rgba(255,255,255,.2);">\n                <span style="font-weight: bold; color: #60a5fa; flex: 1;">Color Detector</span>\n                <button id="settings-toggle" style="\n                  background: none;\n                  color: white;\n                  padding: 4px 6px;\n                  border-radius: 4px;\n                  font-size: 24px;\n                  cursor: pointer;\n                  font-family: monospace;\n                ">⚙</button>\n              </div><div>${e}</div><div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;"><span style="flex-shrink: 0;">${X||"Palette: -"}</span></div><div style="display: flex; align-items: center; gap: 8px;">\n                <button id="smart-brush-toggle" style="\n                  background: ${Y?"rgba(34, 197, 94, 0.3)":"none"};\n                  color: white;\n                  border: ${Y?"2px solid #22c55e":"1px solid rgba(255,255,255,0.3)"};\n                  padding: 6px 8px;\n                  border-radius: 4px;\n                  font-size: 14px;\n                  cursor: pointer;\n                  transition: all 0.2s;\n                  display: flex;\n                  align-items: center;\n                  gap: 6px;\n                " title="Smart Brush - Automatically select colors while painting with spacebar or mouse. Detects the color you're hovering over and switches to it before painting.">\n                  🖌️ Smart Brush\n                </button>\n              </div>`+(L?t:""),A()})()}));const t=document.getElementById("smart-brush-toggle");t&&t.addEventListener("click",(e=>{e.stopPropagation(),Y=!Y,Y?(M=null,console.log("[Smart Brush] Activated - ready to detect colors")):console.log("[Smart Brush] Deactivated"),C&&requestAnimationFrame((()=>O(performance.now())))}));const n=document.getElementById("area-calc-toggle");n&&n.addEventListener("change",(e=>{e.stopPropagation(),k=e.target.checked,localStorage.setItem("showAreaCalculator",k.toString()),k?document.body.appendChild(g):g.parentNode&&g.parentNode.removeChild(g)}))},O=l=>{if(D=!1,!C)return;if(l-E<30)return;if(E=l,C.x===G&&C.y===z)return;G=C.x,z=C.y;const d=t.getBoundingClientRect(),s=C.clientX-d.left,p=C.clientY-d.top,m=r.drawingBufferWidth,g=r.drawingBufferHeight,c=Math.max(0,Math.min(m-1,Math.floor(s*m/d.width))),u=Math.max(0,Math.min(g-1,Math.floor((d.height-p)*g/d.height)));w={x:c,y:u},$();const b=new Uint8Array(4);try{r.readPixels(c,u,1,1,r.RGBA,r.UNSIGNED_BYTE,b)}catch(e){return void console.warn("[wplace] readPixels failed:",e)}const[x,h,f,y]=b,v=(((e,t,n)=>{[e,t,n].map((e=>e.toString(16).padStart(2,"0"))).join("")})(x,h,f),(([t,r,o])=>[n(e(t)),n(e(r)),n(e(o))])([x,h,f]));let S=(e=>{let t=null,n=1/0;for(const r of o){const o=i(e,r.tinted);if(o<n&&(n=o,t=r),0===o)break}return t&&n<=3?t:null})([x,h,f])||(e=>{let t=null,n=1/0;for(const r of o){const o=i(e,r.rgb);if(o<n&&(n=o,t=r),0===o)break}return t&&n<=3?t:null})([x,h,f]);I=S;const B=S?`Palette: ${S.name} (id ${S.id})`:"Palette: -",M=S?`<span style="display: inline-block; width: 16px; height: 16px; background-color: rgb(${S.rgb[0]},${S.rgb[1]},${S.rgb[2]}); border: 1px solid #fff; margin-left: 8px; vertical-align: middle;"></span>`:"",O=`RGB: ${v[0]},${v[1]},${v[2]}`;if(!(O!==P||B!==X||Y!==T))return;P=O,X=B,T=Y;const W=`\n        <div style="padding: 8px; background: rgba(255,255,255,.05); border-radius: 6px; margin-top: 8px;">\n          <div style="font-weight: bold; margin-bottom: 8px; color: #60a5fa;">Settings</div>\n          <label style="display: flex; align-items: center; gap: 8px; cursor: pointer; font-size: 14px;">\n            <input type="checkbox" id="area-calc-toggle" ${k?"checked":""} style="margin: 0;">\n            <span>Show Area Calculator</span>\n          </label>\n        </div>\n      `;a.innerHTML=`<div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px; padding-bottom: 4px; border-bottom: 1px solid rgba(255,255,255,.2);">\n          <span style="font-weight: bold; color: #60a5fa; flex: 1;">Color Detector</span>\n          <button id="settings-toggle" style="\n            background: none;\n            color: white;\n            padding: 4px 6px;\n            border-radius: 4px;\n            font-size: 24px;\n            cursor: pointer;\n            font-family: monospace;\n          ">⚙</button>\n        </div><div>${O}</div><div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;"><span style="flex-shrink: 0;">${B}</span>${M}</div><div style="display: flex; align-items: center; gap: 8px;">\n          <button id="smart-brush-toggle" style="\n            background: ${Y?"rgba(34, 197, 94, 0.3)":"none"};\n            color: white;\n            border: ${Y?"2px solid #22c55e":"1px solid rgba(255,255,255,0.3)"};\n            padding: 6px 8px;\n            border-radius: 4px;\n            font-size: 14px;\n            cursor: pointer;\n            transition: all 0.2s;\n            display: flex;\n            align-items: center;\n            gap: 6px;\n          " title="Smart Brush - Automatically select colors while painting with spacebar or mouse. Detects the color you're hovering over and switches to it before painting.">\n            🖌️ Smart Brush\n          </button>\n          ${!Y||!S||S.premium&&document.querySelector(`#color-${S.id}`)?.querySelector("svg")?"":'<div style="width: 8px; height: 8px; background: #22c55e; border-radius: 50%; flex-shrink: 0;" title="Color available for painting"></div>'}\n        </div>`+(L?W:""),A()};t.addEventListener("mousemove",(e=>{C=e,D||(D=!0,requestAnimationFrame(O))}),{passive:!0});const W=e=>{const t=document.querySelector(`#color-${e}`);if(t){return null!==t.querySelector("svg")?(console.log("[Smart Brush] Color is locked, cannot select:",e),!1):(t.click(),console.log("[Smart Brush] Selected color:",e),!0)}return!1};let q=!1;document.addEventListener("keydown",(e=>{if("Space"===e.code&&Y&&!q&&C&&document.elementFromPoint(C.clientX,C.clientY)===t&&(q=!0,I&&I.id!==M)){if(I.premium){const t=document.querySelector(`#color-${I.id}`);if(t&&t.querySelector("svg"))return console.log("[Smart Brush] Cannot paint with locked color:",I.name),e.preventDefault(),void e.stopPropagation()}W(I.id)&&(M=I.id,console.log("[Smart Brush] Color changed to:",I.name),setTimeout((()=>{C&&requestAnimationFrame((()=>O(performance.now())))}),10))}}),!0),document.addEventListener("keyup",(e=>{"Space"===e.code&&(q=!1)}),!0),t.addEventListener("mousedown",(e=>{if(0===e.button&&Y&&I&&I.id!==M){if(I.premium){const t=document.querySelector(`#color-${I.id}`);if(t&&t.querySelector("svg"))return console.log("[Smart Brush] Cannot paint with locked color:",I.name),e.preventDefault(),void e.stopPropagation()}W(I.id)&&(M=I.id,console.log("[Smart Brush] Color changed to:",I.name),setTimeout((()=>{C&&requestAnimationFrame((()=>O(performance.now())))}),10))}}),!0),console.log("[wplace] pixel sampler ready (WebGL, detint + palette + area calculator + smart brush).")})()})();
